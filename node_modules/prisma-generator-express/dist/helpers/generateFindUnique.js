"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateFindUniqueFunction = void 0;
const strings_1 = require("../utils/strings");
const generateFindUniqueFunction = (options) => {
    const { model, prismaImportStatement } = options;
    const modelName = model.name;
    const functionName = `${modelName}FindUnique`;
    const queryTypeName = `Prisma.${modelName}FindUniqueArgs`;
    return `
${prismaImportStatement.replace('{ Prisma }', `{ Prisma, ${modelName} }`)}
import { Request, Response, NextFunction } from 'express'
import {
  RequestHandler,
  ParamsDictionary,
} from 'express-serve-static-core' 
import { ParsedQs } from 'qs';
import { ZodTypeAny } from 'zod';

export interface FindUniqueRequest extends Request {
  prisma: PrismaClient;
  query: ${queryTypeName} & ParsedQs;
  outputValidation?: ZodTypeAny;
  omitOutputValidation?: boolean;
  passToNext?: boolean;
  locals: {
    data?: ${modelName} | null
  }
}
export type FindUniqueMiddleware = RequestHandler<ParamsDictionary, any, any, ${queryTypeName} & ParsedQs, Record<string, any>>

export async function ${functionName}(req: FindUniqueRequest, res: Response, next: NextFunction) {
  try {
    if (!req.outputValidation && !req.omitOutputValidation) {
      throw new Error('Output validation schema or omission flag must be provided.');
    }

    const data = await req.prisma.${(0, strings_1.lowercaseFirstLetter)(modelName)}.findUnique(req.query as ${queryTypeName});
    if (req.passToNext) {
      req.locals.data = data;
      next();
    } else if (!req.omitOutputValidation && req.outputValidation) {
      const validationResult = req.outputValidation.safeParse(data);
      if (validationResult.success) {
        res.status(200).json(validationResult.data);
      } else {
        res.status(400).json({ error: 'Invalid data format', details: validationResult.error });
      }
    } else if (!req.omitOutputValidation) {
      throw new Error('Output validation schema must be provided unless explicitly omitted. Attach omitOutputValidation = true to request to suppress this error.');
    } else {
      res.status(200).json(data);
    }
  } catch (error) {
    console.error('Error in handling request:', error);
    res.status(500).json({ error: error.message });
    next(error);
  }
}`;
};
exports.generateFindUniqueFunction = generateFindUniqueFunction;
//# sourceMappingURL=generateFindUnique.js.map