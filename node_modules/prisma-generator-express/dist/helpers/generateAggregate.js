"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateAggregateFunction = void 0;
const strings_1 = require("../utils/strings");
const generateAggregateFunction = (options) => {
    const { model, prismaImportStatement } = options;
    const modelName = model.name;
    const functionName = `${modelName}Aggregate`;
    const argsTypeName = `Prisma.${(0, strings_1.capitalize)(modelName)}AggregateArgs`;
    return `
${prismaImportStatement}
import { Request, Response, NextFunction } from 'express';
import { RequestHandler, ParamsDictionary } from 'express-serve-static-core'
import { ParsedQs } from 'qs'
import { ZodTypeAny } from 'zod';

interface AggregateRequest extends Request {
  prisma: PrismaClient;
  query: Partial<${argsTypeName}> & ParsedQs;
  outputValidation?: ZodTypeAny;
  omitOutputValidation?: boolean;
}

export type AggregateMiddleware = RequestHandler<ParamsDictionary, any, Partial<${argsTypeName}>, Record<string, any>>;

export async function ${functionName}(req: AggregateRequest, res: Response, next: NextFunction) {
  try {
    if (!req.outputValidation && !req.omitOutputValidation) {
      throw new Error('Output validation schema or omission flag must be provided.');
    }

    const result = await req.prisma.${(0, strings_1.lowercaseFirstLetter)(modelName)}.aggregate(req.query as ${argsTypeName});

    if (!req.omitOutputValidation && req.outputValidation) {
      const validationResult = req.outputValidation.safeParse(result);
      if (validationResult.success) {
        res.status(200).json(validationResult.data);
      } else {
        res.status(400).json({ error: 'Invalid data format', details: validationResult.error });
      }
    } else {
      res.status(200).json(result);
    }
  } catch (error) {
    console.error('Error in handling aggregation request:', error);
    res.status(500).json({ error: error.message });
    next(error);
  }
}`;
};
exports.generateAggregateFunction = generateAggregateFunction;
//# sourceMappingURL=generateAggregate.js.map